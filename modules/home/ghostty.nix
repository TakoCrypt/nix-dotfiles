{
  config,
  lib,
  ...
}:
with lib; let
  cfg = config.programConfig.ghostty;

  eitherStrBoolNum = with types; either str (either bool number);

  # Either a (str | bool | number) or a list of (str | bool | number)
  anyConfigType = with types;
    either (listOf eitherStrBoolNum) eitherStrBoolNum;

  boolToStr = bool:
    if bool == true
    then "true"
    else "false";

  toGhosttyConfig = generators.toKeyValue {
    listsAsDuplicateKeys = true;
    mkKeyValue = key: value: let
      value' =
        (
          if isBool value
          then boolToStr
          else toString
        )
        value;
    in "${key} = ${value'}";
  };

  toGhosttyKeybindings = generators.toKeyValue {
    listsAsDuplicateKeys = true;
    mkKeyValue = key: value: "keybind = ${key}=${value}";
  };

  shellIntegrationInit = {
    bash = ''
      if test -n "$GHOSTTY_RESOURCES_DIR"; then
        source "$GHOSTTY_RESOURCES_DIR/shell-integration/bash/ghostty.bash"
      fi
    '';
    fish = ''
      if set -q GHOSTTY_RESOURCES_DIR
        source "$GHOSTTY_RESOURCES_DIR/shell-integration/fish/vendor_conf.d/ghostty-shell-integration.fish"
        set --prepend fish_complete_path "$GHOSTTY_RESOURCES_DIR/shell-integration/fish/vendor_completions.d"
      end
    '';
    zsh = ''
      if test -n "$GHOSTTY_RESOURCES_DIR"; then
        autoload -Uz -- "$GHOSTTY_RESOURCES_DIR"/shell-integration/zsh/ghostty-integration
        ghostty-integration
        unfunction ghostty-integration
      fi
    '';
  };
in {
  options.programConfig.ghostty = {
    enable = mkEnableOption "Ghostty terminal emulator";

    settings = mkOption {
      type = types.attrsOf anyConfigType;
      default = {};
      example = literalExpression ''
        {
          cursor-style-blink = false;
          font-family = "Roboto Mono";
        }
      '';
      description = ''
        Configuration written to
        {file}`$XDG_CONFIG_HOME/ghostty/config`.
      '';
    };

    shellIntegration = let
      defaultShellIntegration = {
        default = cfg.shellIntegration.enabled;
        defaultText =
          literalExpression "config.programConfig.ghostty.shellIntegration.enabled";
      };
    in {
      enabled =
        mkEnableOption "all Ghostty shell integrations"
        // {default = true;};

      enableBashIntegration =
        mkEnableOption "Ghostty Bash integration"
        // defaultShellIntegration;

      enableZshIntegration =
        mkEnableOption "Ghostty Zsh integration"
        // defaultShellIntegration;

      enableFishIntegration =
        mkEnableOption "Ghostty Fish integration"
        // defaultShellIntegration;
    };

    keybindings = mkOption {
      type = with types; attrsOf str;
      default = {};
      description = ''
        Set custom Ghostty keybindings.

        Keybindings consist of a key, optionally preceded by modifiers, and
        separated by the + symbol.
        Keys are spelled in English, such as 'minus' for the '-' character,
        or 'left' for the left arrow.

        The following key names can use the following modifiers:
        'ctrl', 'super', 'shift', 'alt', 'caps_lock', 'num_lock'
      '';
      example = literalExpression ''
        {
          "ctrl+shift+c" = "copy";
        }
      '';
    };

    # The package can be omitted
    package = mkOption {
      type = with types; nullOr package;
      default = null;
      defaultText = literalExpression "null";
      description = "The Ghostty package to install.";
    };

    extraConfig = mkOption {
      default = "";
      type = types.lines;
      description = "Additional configuration to add.";
    };
  };

  config = mkIf cfg.enable {
    home.packages = mkIf (cfg.package != null) [cfg.package];

    xdg.configFile."ghostty/config" = {
      text = concatStringsSep "\n" [
        ''
          # Generated by Home Manager.
          # See https://github.com/mitchellh/ghostty
        ''

        (optionalString cfg.shellIntegration.enabled ''
          # Shell integration is sourced and configured manually
          shell-integration = none
        '')

        (toGhosttyConfig cfg.settings)

        (toGhosttyKeybindings cfg.keybindings)

        (optionalString (cfg.extraConfig != "") ''
          # Extra config
          ${cfg.extraConfig}
        '')
      ];
    };

    programs.bash.initExtra =
      mkIf cfg.shellIntegration.enableBashIntegration shellIntegrationInit.bash;

    programs.zsh.initExtra =
      mkIf cfg.shellIntegration.enableZshIntegration shellIntegrationInit.zsh;

    programs.fish.interactiveShellInit =
      mkIf cfg.shellIntegration.enableFishIntegration shellIntegrationInit.fish;
  };
}
